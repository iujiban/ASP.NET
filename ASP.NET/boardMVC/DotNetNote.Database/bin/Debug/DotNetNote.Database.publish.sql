/*
Deployment script for DotNetNote

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DotNetNote"
:setvar DefaultFilePrefix "DotNetNote"
:setvar DefaultDataPath "C:\Users\KIMSURIN\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\KIMSURIN\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[NoteComments]...';


GO
CREATE TABLE [dbo].[NoteComments] (
    [Id]        INT             IDENTITY (1, 1) NOT NULL,
    [BoardName] NVARCHAR (50)   NULL,
    [BoardId]   INT             NOT NULL,
    [Name]      NVARCHAR (25)   NOT NULL,
    [Opinion]   NVARCHAR (4000) NOT NULL,
    [PostDate]  SMALLDATETIME   NULL,
    [Password]  NVARCHAR (20)   NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Notes]...';


GO
CREATE TABLE [dbo].[Notes] (
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [Name]       NVARCHAR (25)  NOT NULL,
    [Email]      NVARCHAR (100) NULL,
    [Title]      NVARCHAR (150) NOT NULL,
    [PostDate]   DATETIME       NOT NULL,
    [PostIp]     NVARCHAR (15)  NULL,
    [Content]    NTEXT          NOT NULL,
    [Password]   NVARCHAR (20)  NULL,
    [ReadCount]  INT            NULL,
    [Encoding]   NVARCHAR (10)  NOT NULL,
    [HomePage]   NVARCHAR (100) NULL,
    [ModifyDate] DATETIME       NULL,
    [ModifyIp]   NVARCHAR (15)  NULL,
    [FileName]   NVARCHAR (255) NULL,
    [FileSize]   INT            NULL,
    [DownCount]  INT            NULL,
    [Ref]        INT            NOT NULL,
    [Step]       INT            NULL,
    [RefOrder]   INT            NULL,
    [AnswerNum]  INT            NULL,
    [ParentNum]  INT            NULL,
    [Category]   NVARCHAR (10)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[NoteComments]...';


GO
ALTER TABLE [dbo].[NoteComments]
    ADD DEFAULT (GetDate()) FOR [PostDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[Notes]...';


GO
ALTER TABLE [dbo].[Notes]
    ADD DEFAULT GetDate() FOR [PostDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[Notes]...';


GO
ALTER TABLE [dbo].[Notes]
    ADD DEFAULT 0 FOR [ReadCount];


GO
PRINT N'Creating unnamed constraint on [dbo].[Notes]...';


GO
ALTER TABLE [dbo].[Notes]
    ADD DEFAULT 0 FOR [FileSize];


GO
PRINT N'Creating unnamed constraint on [dbo].[Notes]...';


GO
ALTER TABLE [dbo].[Notes]
    ADD DEFAULT 0 FOR [DownCount];


GO
PRINT N'Creating unnamed constraint on [dbo].[Notes]...';


GO
ALTER TABLE [dbo].[Notes]
    ADD DEFAULT 0 FOR [Step];


GO
PRINT N'Creating unnamed constraint on [dbo].[Notes]...';


GO
ALTER TABLE [dbo].[Notes]
    ADD DEFAULT 0 FOR [RefOrder];


GO
PRINT N'Creating unnamed constraint on [dbo].[Notes]...';


GO
ALTER TABLE [dbo].[Notes]
    ADD DEFAULT 0 FOR [AnswerNum];


GO
PRINT N'Creating unnamed constraint on [dbo].[Notes]...';


GO
ALTER TABLE [dbo].[Notes]
    ADD DEFAULT 0 FOR [ParentNum];


GO
PRINT N'Creating [dbo].[DeleteNote]...';


GO
Create Procedure dbo.DeleteNote
@Id Int,
@Password NVarChar(30) --암호 매개 변수 추가
As
Declare @cnt Int
Select @cnt = Count(*) From Notes
Where Id = @Id And Password = @Password

If @cnt = 0
Begin 
Return 0 -- 번호와 암호가 맞는 게 없으면 0을 반환
End

Declare @AnswerNum Int
Declare @RefOrder Int
Declare @Ref Int
Declare @ParentNum Int

Select 
@AnswerNum = AnswerNum, @RefOrder = RefOrder,
@Ref= Ref, @ParentNum = ParentNum
From Notes
WHere Id = @Id

If @AnswerNum = 0
Begin 
If @RefOrder >0
Begin 
Update Notes SET RefOrder = RefOrder -1
Where Ref  = @Ref AND RefOrder > @RefOrder
UPDATE Notes SET AnswerNum = AnswerNum -1 WHERE Id = @ParentNum
End

Delete Notes where Id = @Id
Delete Notes
Where Id = @ParentNum AND ModifyIp = N'((DELETED))' AND AnswerNum = 0
END
Else
Begin
Update Notes
Set
Name = N'(Unknown)', Email = '', Password = '',
Title = N'(삭제된 글입니다)', Content = N'(삭제된 글입니다. ' + N'현재 답변이 포함되어 있기 때문에 내용만 삭제되었습니다.)',
ModifyIp = N'((DELETED))', FileName = '',
FileSize = 0
Where Id = @Id
End
GO
PRINT N'Creating [dbo].[GetCountNotes]...';


GO
Create Procedure dbo.GetCountNotes
As Select Count(*) From Notes
GO
PRINT N'Creating [dbo].[ListNotes]...';


GO
Create Procedure dbo.ListNotes
@Page Int
As
With DotNetNoteOrderedLists
As
(
Select [Id], [Name], [Email], [Title], [PostDate],[ReadCount], [Ref],
[Step],[RefOrder],[AnswerNum],[ParentNum],[FileName],[FileSize],[DownCount], 
Row_NUMBER() Over (Order By Ref Desc, RefOrder Asc) As 'RowNumber'
From Notes
)
Select * From DotNetNoteOrderedLists
Where RowNumber Between @Page * 10 + 1 And (@Page +1) * 10
GO
PRINT N'Creating [dbo].[ModifyNote]...';


GO
Create Proc dbo.ModifyNote
@Name NVarChar(25),
@Email NVarChar(100),
@Title NVarChar(150),
@ModifyIp NVarChar(15),
@Content NText,
@Password NVarChar(30),
@Encoding NVarChar(10),
@Homepage NVarChar(100),
@FileName NVarChar(255),
@FileSize Int,
@Id Int
As
Declare @cnt Int
Select @cnt = Count (*) From Notes
Where Id = @Id And Password = @Password

If @cnt >0 -- 번호와 암호가 맞는게 있다면 ~
Begin 
Update Notes
Set Name = @Name, Email= @Email, Title = @Title, ModifyIp = @ModifyIp, ModifyDate = GetDate(),
Content = @Content, Encoding = @Encoding, Homepage= @Homepage, FileNAME = @FileName , Filesize = @FileSize
Where Id = @Id

Select '1'
End
Else 
Select '0'
GO
PRINT N'Creating [dbo].[ReplyNote]...';


GO
Create Proc dbo.ReplyNote
@Name NVarChar(25),
@Email NVarChar(100),
@Title NVarChar(150),
@PostIp NVarChar(15),
@Content NText,
@Password NVarChar(20),
@Encoding NVarChar(10),
@Homepage NVarChar(100),
@ParentNum Int, --부모글 고유번호
@FileName NVarChar(255),
@FileSize Int

As
--변수 선언
Declare @MaxRefOrder Int
Declare @MaxRefAnswerNum Int
Declare @ParentRef Int
Declare @ParentStep Int
Declare @ParentRefOrder Int

-- 부모글의 답변수 (AnswerNum)를 1 증가
Update Notes Set AnswerNum = AnswerNum + 1 where Id = @ParentNum

-- 같은 글에 대해서 답변을 두 번 이상하면 먼저 답변한 게 위에 나타나게 한다.
Select @MaxRefOrder = RefOrder, @MaxRefAnswerNum = AnswerNum From Notes
Where ParentNum = @ParentNum And RefOrder = (Select Max(RefOrder) From Notes Where ParentNum = @ParentNum)

If @MaxRefOrder Is Null
Begin 
Select @MaxRefOrder = RefOrder From Notes Where Id = @ParentNum
Set @MaxRefAnswerNum = 0
End

Update Notes
Set 
RefOrder = RefOrder +1
Where Ref = @ParentRef And RefOrder > (@MaxRefOrder + @MaxRefAnswerNum)

Insert Notes (
Name, Email, Title, PostIp, Content, Password, Encoding, Homepage, Ref, Step, RefOrder, ParentNum, FileName, FileSize
) Values (
@Name, @Email, @Title, @PostIp, @Content, @Password, @Encoding, @Homepage, @ParentRef, @ParentStep + 1, @MaxRefOrder + @MaxRefOrder + @MaxRefAnswerNum +1, @ParentNum, @FileName, @FileSize
)
GO
PRINT N'Creating [dbo].[SearchNoteCount]...';


GO
Create Procedure dbo.SearchNoteCount
@SearchField NVarChar(25),
@SearchQuery NVarChar(25)
As 
Set @SearchQuery = '%' + @SearchQuery + '%'

Select Count(*)
From Notes
Where (
Case @SearchField
When 'Name' Then [Name]
When 'Title' Then [Title]
When 'Content' Then [Content]
Else @SearchQuery
End
)
Like @SearchQuery
GO
PRINT N'Creating [dbo].[SearchNotes]...';


GO
Create Procedure dbo.SearchNotes
@Page INT,
@SearchField NVarChar(25),
@SearchQuery NVarChar(25)
As
With DotNetNoteOrderedLists
As
(
Select [Id],[Name],[Email],[Title], [PostDate], [ReadCount],[Ref],[Step],[RefOrder],[AnswerNum]
,[ParentNum], [FileName], [FileSize],[DownCount], ROW_NUMBER() Over (Order By Ref Desc, RefOrder Asc)
As 'RowNumber'
From Notes
Where ( Case @SearchField
When 'Name' Then [Name]
When 'Title' Then Title
When 'Conten' Then Content
Else
@SearchQuery
End

) Like '%' + @SearchQuery + '%'
)
Select [ID], [Name], [Email], [Title], [PostDate], [ReadCount], [Ref], [Step], [RefOrder], [AnswerNum]
,[ParentNum], [FileName], [FileSize], [DownCount], [RowNumber] From DotNetNoteOrderedLists
Where RowNumber Between @Page * 10 + 1 And (@Page + 1) * 10
Order By Id Desc
GO
PRINT N'Creating [dbo].[ViewNote]...';


GO
Create Procedure dbo.ViewNote
@Id Int
As
 --조회수 카운트 1 증가
 Update Notes Set ReadCount = ReadCount + 1 Where Id = @Id

 --모든 항목 조회
 Select * From Notes Where Id = @Id
GO
PRINT N'Creating [dbo].[WriteNote]...';


GO
Create Procedure dbo.WriteNote
@Name NVarChar(25),
@Email NVarChar(100),
@Title NVarchar(150),
@PostIp NVarchar(15),
@Content NText,
@Password NVarChar(20),
@Encoding NVarChar(10),
@Homepage NVarChar(100),
@FileName NVarChar(255),
@FileSize Int
As 
Declare @MaxRef Int
Select @MaxRef = Max(Ref) From Notes

If @MaxRef is Null
Set @MaxRef = 1 -- 처음 비교
Else
Set @MaxRef = @MaxRef + 1

Insert Notes
(
	Name, Email, Title, PostIp, Content, Password, Encoding, Homepage,Ref, FileName, Filesize
) Values
(
	@Name, @Email, @Title, @PostIp, @Content, @Password, @Encoding, @Homepage, @MaxRef, @FileName, @FileSize
)
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
